/*! \page usage_fortran_sec Fortran Interface

\section usage_fortran_df_sec Density Fitting Fortran Interface

The Fortran interface is similar to the C interface, except functions
are prefixed with panachef_ rather than panache_, and functions return
information through the last parameter. The init functions are a bit more
complex, however.

This example roughly follows code to calculate MP2 correlation energies.
Obviously, variable declarations would go at the top, etc. This is just meant
as a general outline.

\code{.f90}

! At the moment, the fortran interface allows only no printing or printing to stdout

call panachef_stdout()


! see documention for panachef_init_ for definitions of the variables,
! although many should be self explanatory
! The call is similar to that in the C interface, although the structure
! is split up
! INTEGER :: dfhandle


call panachef_dfinit(ncenters,
                     xyz, symbols, symbollen, normalized,
                     primary_nshellspercenter, primary_am, primary_is_pure,
                     primary_nprimpershell, primary_exp, primary_coef,
                     aux_nshellspercenter, aux_am, aux_is_pure,
                     aux_nprimpershell, aux_exp, aux_coef,
                     dirname, dirnamelen, nthreads, dfhandle)


! Could also call panachef_init2 instead
!call panachef_dfinit2(ncenters,
!                      xyz, symbols, symbollen, normalized,
!                      primary_nshellspercenter, primary_am, primary_is_pure,
!                      primary_nprimpershell, primary_exp, primary_coef,
!                      auxfile, auxfilelen,
!                      dirname, dirnamelen, nthreads, dfhandle)



! panache makes copies of all this information, so it can be safely deallocated


! Set the C matrix and occupations
! INTEGER :: nmo, nocc, nfroz
! DOUBLE PRECISION :: cmat(nmo,nmo)

! Last 2 arguments
! 0 = Not the transpose
! 1 = PSI4 ordering (see Flags.h)
call panachef_setcmatrix(dfhandle, cmat, nmo, 0, 1)
call panachef_setnocc(dfhandle, nocc, nfroz)


! See Flags.h for the values of the flags you want to pass.
! For this example

! For tensors:
! 1 = QGEN_QSO
! 16 = QGEN_QOV
! 17 = QGEN_QSO | QGEN_QOV

! For storage:
! 8 = QSTORAGE_INMEM


! Generate the 3-index tensors
call panachef_genqtensors(dfhandle, 17, 8)




! Get dimensions, allocate buffer, give buffer to panache
! From now on, we work with Qov ( = 16)
! INTEGER :: nbatchsize
call panachef_batchsize(dfhandle, 16, nbatchsize)
allocate(iabuff(1:nbatchsize), stat=s)
allocate(jbbuff(1:nbatchsize), stat=s)
allocate(ibbuff(1:nbatchsize), stat=s)
allocate(jabuff(1:nbatchsize), stat=s)


! Number of batches (although, since because of the buffer size,
! getbatch should always give 1
! INTEGER :: nbatch

nbatch = 0

! MP2 energy components
! DOUBLE PRECISION :: e2s, e2t, e2tot

e2s = 0.0d0
e2t = 0.0d0

! Loop over orbitals
do i = 1, nocc
do j = 1, nocc
do a = 1, nvir
do b = 1, nvir

! Get the combined orbital indices
! INTEGER :: ia, jb, ib, ja
call panachef_calcindex(dfhandle, 16, i, a, ia)
call panachef_calcindex(dfhandle, 16, j, b, jb)
call panachef_calcindex(dfhandle, 16, i, b, ib)
call panachef_calcindex(dfhandle, 16, j, a, ja)


iajb = 0.0d0
ibja = 0.0d0

do q = 1,batchsize
  iajb = iajb + iabuff(q)*jbbuff(q)
  ibja = ibja + ibbuff(q)*jabuff(q)
end do

! Same as in the c interface, you must remember the frozen orbitals
! when dealing with the eigenvalues
! DOUBLE PRECISION :: denom
denom = evec(i) + evec(j) - evec(a) - evec(b)


e2s = e2s + (iajb**2)/denom
e2t = e2t + (iajb * (iajb-ibja))/denom

end do
end do
end do
end do



! cleanup time
call panachef_cleanup(dfhandle)
! or
call panachef_cleanup_all

! Can now delete the buffers
deallocate(iabuff)
deallocate(jbbuff)
deallocate(ibbuff)
deallocate(jabuff)

\endcode


\section usage_fortran_ch_sec Cholesky Fortran Interface

Just the the C interface, the only difference is in the call to panachef_chinit rather than
panachef_dfinit

\code{.f90}
call panachef_chint(ncenters
                   xyz, symbols, symbollen, normalized,
                   primary_nshellspercenter, primary_am, primary_is_pure,
                   primary_nprimpershell, primary_exp, primary_coef,
                   delta,
                   dirname, dirnamelen, nthreads, dfhandle)


\endcode



*/
