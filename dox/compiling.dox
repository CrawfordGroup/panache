/////////////////////////
// COMPILING           //
/////////////////////////
/*! \page compiling_page Compiling & Installing

\tableofcontents

\section general_compiling_sec General Considerations

\subsection compiling_f64bit_sec 64-bit vs 32-bit Fortran Interface 

By default, the Fortran interface is compiled using 32-bit integers. If
you are compiling with "-i8" or are otherwise using 64-bit integers,
you should enable the \ref USE_64PANACHE_sec option. You will likely have
to enable \ref USE_64LAPACK_sec option (see below) Using the C interface
with the wrong bit-ness may result in compiler warning, but may be safe.


\subsection compiling_lapack64 64-bit BLAS/Lapack

If you are linking to 64-bit BLAS/Lapack libraries (for example,
Intel MKL libraries with the -ilp64 suffix rather than the -lp64
suffix), you must enable the \ref USE_64LAPACK_sec option.


\subsection compiling_backend_sec Integral Backends

The default backend for calculating the two- and three-center integrals
is an internal function. Although this function doesn't require any external
libraries, it is likely far too slow for any production purposes.
Therefore, a backend should be selected by giving the appropriate path
to either the \ref LIBINT_PATH_sec or the \ref LIBINT2_PATH_sec cmake options.



\section requirements_sec Requirements

  - Required
      - CMake v2.8 or greater
      - C++ compiler with C++11 support

  - Recommended
      - libint integral package (version 1.X or 2.X)
            - vectorization in v2 is not supported at the moment
 
 

\section compiling_sec Compiling



\subsection compilersel_sec Compiler Selection
To change the compilers you are going to use, set the CXX, CC, and FC
environment variables for the C++, C, and Fortran compilers, respectively.

To set them globally:
\code{.sh}
export CC=icc
export CXX=icpc
export FC=ifort
cmake ...
\endcode

Or you can set them for just the CMake command
\code{.sh}
CC=icc CXX=icpc FC=ifort cmake ...
\endcode


\subsection cmake_sec CMake options
These options are typically passed to the cmake command. For example,

\code{.sh}
cmake -DCMAKE_INSTALL_PREFIX=/my/install/path \
      -DPANACHE_TIMING=On \
      -DCMAKE_BUILD_TYPE="Release" /path/to/source
\endcode


\subsubsection CMAKE_INSTALL_PREFIX_sec CMAKE_INSTALL_PREFIX
Top level directory to install the library and related files. Default: /usr/local

\subsubsection CMAKE_BUILD_TYPE_sec CMAKE_BUILD_TYPE
The type of build. Can be "Release", "Debug", "RelWithDebInfo", or "MinSizeRel".


\subsubsection LIBINT_PATH_sec          LIBINT_PATH
Path to top level of libint (version 1). The directory structure should be:

 - LIBINT_PATH
    - include
        - libint
            - libint.h
            - (others)
    - lib
        - libint.a



\subsubsection LIBINT2_PATH_sec         LIBINT2_PATH
Path to top level of libint (version 1). The directory structure should be:

 - LIBINT2_PATH
    - include
        - libint2
            - libint2.h
            - (others)
    - lib
        - libint2.a


\subsubsection BLA_VENDOR_sec BLA_VENDOR
Which vendor to use for BLAS/Lapack.

\subsubsection USE_64LAPACK_sec         USE_64LAPACK
Enable if you plan on linking to 64-bit lapack or MKL (ie mkl ilp64
libraries)


\subsubsection PANACHE_OPENMP_sec       PANACHE_OPENMP
Enable OpenMP. Whether or not OpenMP is used depends on if your
compiler supports it.



\subsubsection PANACHE_TIMING_sec       PANACHE_TIMING
Enable timing of some functions. Timings will be printed to the
usual output



\subsubsection PANACHE_DISKPREFETCH_sec PANACHE_DISKPREFETCH
Prefetching of the next batch from disk. Highly experimental, and
requires a very new compiler (GCC 4.8 or Intel 15 [beta]).



\subsubsection USE_64PANACHE_sec        USE_64PANACHE
Use 64-bit C/Fortran interfaces to libpanache. May be required if
compiling the Fortran code with 64-bit integers.


 */
